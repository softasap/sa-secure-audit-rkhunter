---
sudo: required

env:
  - distribution='ubuntu'
    version='14.04'
    init='/sbin/init'
    run_opts=''
    playbook='test.yml'
  - distribution='ubuntu'
    version='16.04'
    init='/sbin/init'
    run_opts='--security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro'
    playbook='test.yml'
  - distribution='ubuntu'
    version='18.04'
    init='/sbin/init'
    run_opts='--security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro'
    playbook='test.yml'
#  - distribution='fedora'
#    version='25'
#    init='/usr/sbin/init'
#    run_opts='--security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro'
#    playbook='test.yml'
#  - distribution='fedora'
#    version='26'
#    init='/usr/sbin/init'
#    run_opts='--security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro'
#    playbook='test.yml'
#  - distribution='fedora'
#    version='27'
#    init='/usr/sbin/init'
#    run_opts='--security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro'
#    playbook='test.yml'
  - distribution='fedora'
    version='28'
    init='/usr/sbin/init'
    run_opts='--security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro'
    playbook='test.yml'
  - distribution='centos'
    version='7'
    init='/usr/lib/systemd/systemd'
    run_opts='--privileged'
    playbook='test.yml'
#  - distribution: alpine
#    version: 3.4
#    init: /sbin/init
#    playbook: test.yml
#  - distribution: alpine
#    version: 3.5
#    init: /sbin/init
#    playbook: test.yml
#  - distribution: alpine
#    version: 3.6
#    init: /sbin/init
#    playbook: test.yml
#  - distribution: alpine
#    version: 3.7
#    init: /sbin/init
#    playbook: test.yml

# whitelist
branches:
  only:
    - master
    - develop

services:
  - docker

before_install:
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  # Customize container
  - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'
  - 'sudo docker run --rm --privileged -v /:/host ${distribution}-${version}:ansible setup || true'
  - 'sudo mkdir -p /tmp/cgroup/systemd && sudo mount -t cgroup systemd /tmp/cgroup/systemd -o ro,noexec,nosuid,nodev,none,name=systemd'

script:
  - container_id=$(mktemp)
    # Run container in detached state
  - 'echo sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} -t ${distribution}-${version}:ansible "${init}"'
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} -t ${distribution}-${version}:ansible "${init}" > "${container_id}"'
  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} --syntax-check'

  # Ansible linting
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-lint -c /etc/ansible/roles/role_under_test/.ansible-lint /etc/ansible/roles/role_under_test || true'


  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}'

  # Debug in case of idempotence fail
  # - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}'

  # Test role idempotence.
  - >
    sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}
    | grep -q 'unreachable=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # Clean up
  - sudo docker stop "$(cat ${container_id})"

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
